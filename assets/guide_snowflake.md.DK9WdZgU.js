import{_ as l,a as d,b as o}from"./chunks/Machine-Id-Safe-Guard.BSblLDvL.js";import{_ as t,c,a2 as i,b as r,w as e,a3 as h,B as k,o as s,G as p,a as E}from"./chunks/framework.Dg3afQf7.js";const A=JSON.parse('{"title":"SnowflakeId","description":"","frontmatter":{},"headers":[],"relativePath":"guide/snowflake.md","filePath":"guide/snowflake.md","lastUpdated":1760420434000}'),g={name:"guide/snowflake.md"};function f(I,a,S,u,m,y){const n=k("Mermaid");return s(),c("div",null,[a[1]||(a[1]=i('<h1 id="snowflakeid" tabindex="-1">SnowflakeId <a class="header-anchor" href="#snowflakeid" aria-label="Permalink to &quot;SnowflakeId&quot;">​</a></h1><p><em>SnowflakeId</em> 是<em>Twitter</em>开发的一种分布式唯一ID生成算法，被广泛应用于分布式系统中。它的设计目标是生成趋势递增、全局唯一的ID，以应对大规模系统的需求。</p><p align="center"><img src="'+l+'" alt="SnowflakeId"></p><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">INFO</p><p><em>SnowflakeId</em> 使用<code>Long</code>（64-bit）位分区来生成ID的一种分布式ID算法。</p><p>通用的位分配方案为：<code>timestamp</code>(41-bit)+<code>machineId</code>(10-bit)+<code>sequence</code>(12-bit)=63-bit。</p></div><ul><li>41-bit<code>timestamp</code>=(1L&lt;&lt;41)/(1000/3600/24/365)，约可以存储69年的时间戳，即可以使用的绝对时间为<code>EPOCH</code>+69年，一般我们需要自定义<code>EPOCH</code>为产品开发时间，另外还可以通过压缩其他区域的分配位数，来增加时间戳位数来延长可用时间。</li><li>10-bit<code>machineId</code>=(1L&lt;&lt;10)=1024，即相同业务可以部署1024个副本(在Kubernetes概念里没有主从副本之分，这里直接沿用Kubernetes的定义)。一般情况下没有必要使用这么多位，所以会根据部署规模需要重新定义。</li><li>12-bit<code>sequence</code>=(1L&lt;&lt;12)*1000=4096000，即单机每秒可生成约409W的ID，全局同业务集群可产生<code>4096000*1024=419430W=41.9亿(TPS)</code>。</li></ul><p>从 <em>SnowflakeId</em> 设计上可以看出:</p><ul><li>👍 <code>timestamp</code>在高位，单实例<em>SnowflakeId</em>是会保证时钟总是向前的（校验本机时钟回拨），所以是本机单调递增的。受全局时钟同步/时钟回拨影响<em>SnowflakeId</em>是全局趋势递增的。</li><li>👍 <em>SnowflakeId</em>不对任何第三方中间件有强依赖关系，并且性能也非常高。</li><li>👍 位分配方案可以按照业务系统需要灵活配置，来达到最优使用效果。</li><li>👎 强依赖本机时钟，潜在的时钟回拨问题会导致ID重复、处于短暂的不可用状态。</li><li>👎 <code>machineId</code>需要手动设置，实际部署时如果采用手动分配<code>machineId</code>，会非常低效。</li></ul><h2 id="挑战" tabindex="-1">挑战 <a class="header-anchor" href="#挑战" aria-label="Permalink to &quot;挑战&quot;">​</a></h2><h3 id="机器号分配" tabindex="-1">机器号分配 <a class="header-anchor" href="#机器号分配" aria-label="Permalink to &quot;机器号分配&quot;">​</a></h3><p>在<strong>SnowflakeId</strong>中根据业务设计的位分配方案确定了基本上就不再有变更了，也很少需要维护。但是<code>machineId</code>总是需要配置的，而且集群中是不能重复的，否则分区原则就会被破坏而导致ID唯一性原则破坏，当集群规模较大时<code>machineId</code>的维护工作是非常繁琐，低效的。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>有一点需要特别说明的，<strong>SnowflakeId</strong> 的 <strong>MachineId</strong> 是逻辑上的概念，而不是物理概念，所以称之为 <code>WorkerId</code> 更为准确。</p><p>想象一下假设 <strong>MachineId</strong> 是物理上的，那么意味着一台机器拥有只能拥有一个 <strong>MachineId</strong>，那会产生什么问题呢？</p></div><h3 id="时钟回拨" tabindex="-1">时钟回拨 <a class="header-anchor" href="#时钟回拨" aria-label="Permalink to &quot;时钟回拨&quot;">​</a></h3><p>时钟回拨的致命问题是会导致ID重复、冲突（这一点不难理解），ID重复显然是不能被容忍的。 在<strong>SnowflakeId</strong>算法中，按照<strong>MachineId</strong>分区ID，我们不难理解的是不同<strong>MachineId</strong>是不可能产生相同ID的。所以我们解决的时钟回拨问题是指当前<strong>MachineId</strong>的时钟回拨问题，而不是所有集群节点的时钟回拨问题。</p><p><strong>MachineId</strong>时钟回拨问题大体可以分为俩种情况：</p><ul><li>运行时时钟回拨：即在运行时获取的当前时间戳比上一次获取的时间戳小。这个场景的时钟回拨是很容易处理的，一般<strong>SnowflakeId</strong>代码实现时都会存储<code>lastTimestamp</code>用于运行时时钟回拨的检查，并抛出时钟回拨异常。 <ul><li>时钟回拨时直接抛出异常是不太好地实践，因为下游使用方几乎没有其他处理方案（噢，我还能怎么办呢，等吧），时钟同步是唯一的选择，当只有一种选择时就不要再让用户选择了。</li><li><code>ClockSyncSnowflakeId</code>是<code>SnowflakeId</code>的包装器，当发生时钟回拨时会使用<code>ClockBackwardsSynchronizer</code>主动等待时钟同步来重新生成ID，提供更加友好的使用体验。</li></ul></li><li>启动时时钟回拨：即在启动服务实例时获取的当前时钟比上次关闭服务时小。此时的<code>lastTimestamp</code>是无法存储在进程内存中的。当获取的外部存储的<strong>机器状态</strong>大于当前时钟时钟时，会使用<code>ClockBackwardsSynchronizer</code>主动同步时钟。 <ul><li>LocalMachineStateStorage：使用本地文件存储<code>MachineState</code>(机器号、最近一次时间戳)。因为使用的是本地文件所以只有当实例的部署环境是稳定的，<code>LocalMachineStateStorage</code>才适用。</li><li>RedisMachineIdDistributor：将<code>MachineState</code>存储在<strong>Redis</strong>分布式缓存中，这样可以保证总是可以获取到上次服务实例停机时<strong>机器状态</strong>。</li></ul></li></ul><h3 id="取模分片不均匀" tabindex="-1">取模分片不均匀 <a class="header-anchor" href="#取模分片不均匀" aria-label="Permalink to &quot;取模分片不均匀&quot;">​</a></h3><p><em>CosId</em> 通过引入 <code>sequenceResetThreshold</code> 属性，巧妙地解决了取模分片不均匀的问题，这一设计在无需牺牲性能的同时，为用户提供了更加出色的使用体验。</p><h3 id="javascript数值溢出" tabindex="-1">JavaScript数值溢出 <a class="header-anchor" href="#javascript数值溢出" aria-label="Permalink to &quot;JavaScript数值溢出&quot;">​</a></h3><p><code>JavaScript</code>的<code>Number.MAX_SAFE_INTEGER</code>只有53-bit，如果直接将63位的<code>SnowflakeId</code>返回给前端，那么会产生值溢出的情况（所以这里我们应该知道后端传给前端的<code>long</code>值溢出问题，<strong>迟早</strong>会出现，只不过SnowflakeId出现得更快而已）。 很显然溢出是不能被接受的，一般可以使用以下俩种处理方案：</p><ul><li>将生成的63-bit<code>SnowflakeId</code>转换为<code>String</code>类型。 <ul><li>直接将<code>long</code>转换成<code>String</code>。</li><li>使用<code>SnowflakeFriendlyId</code>将<code>SnowflakeId</code>转换成比较友好的字符串表示：<code>{timestamp}-{machineId}-{sequence} -&gt; 20210623131730192-1-0</code></li></ul></li><li>自定义<code>SnowflakeId</code>位分配来缩短<code>SnowflakeId</code>的位数（53-bit）使 <code>ID</code> 提供给前端时不溢出 <ul><li>使用<code>SafeJavaScriptSnowflakeId</code>(<code>JavaScript</code> 安全的 <code>SnowflakeId</code>)</li></ul></li></ul><h2 id="具体实现" tabindex="-1">具体实现 <a class="header-anchor" href="#具体实现" aria-label="Permalink to &quot;具体实现&quot;">​</a></h2>',22)),(s(),r(h,null,{default:e(()=>[p(n,{id:"mermaid-173",class:"mermaid",graph:"classDiagram%0Adirection%20BT%0Aclass%20AbstractSnowflakeId%0Aclass%20ClockSyncSnowflakeId%0Aclass%20DefaultSnowflakeFriendlyId%0Aclass%20IdGenerator%20%7B%0A%3C%3CInterface%3E%3E%0A%0A%7D%0Aclass%20MillisecondSnowflakeId%0Aclass%20SecondSnowflakeId%0Aclass%20SnowflakeFriendlyId%20%7B%0A%3C%3CInterface%3E%3E%0A%0A%7D%0Aclass%20SnowflakeId%20%7B%0A%3C%3CInterface%3E%3E%0A%0A%7D%0Aclass%20StringSnowflakeId%0A%0AAbstractSnowflakeId%20%20..%3E%20%20SnowflakeId%20%0AClockSyncSnowflakeId%20%20..%3E%20%20IdGenerator%20%0AClockSyncSnowflakeId%20%20..%3E%20%20SnowflakeId%20%0ADefaultSnowflakeFriendlyId%20%20..%3E%20%20SnowflakeFriendlyId%20%0ADefaultSnowflakeFriendlyId%20%20--%3E%20%20StringSnowflakeId%20%0AMillisecondSnowflakeId%20%20--%3E%20%20AbstractSnowflakeId%20%0ASecondSnowflakeId%20%20--%3E%20%20AbstractSnowflakeId%20%0ASnowflakeFriendlyId%20%20--%3E%20%20SnowflakeId%20%0ASnowflakeId%20%20--%3E%20%20IdGenerator%20%0AStringSnowflakeId%20%20..%3E%20%20IdGenerator%20%0AStringSnowflakeId%20%20..%3E%20%20SnowflakeId%20%0A"})]),fallback:e(()=>a[0]||(a[0]=[E(" Loading... ")])),_:1})),a[2]||(a[2]=i('<h3 id="millisecondsnowflakeid" tabindex="-1">MillisecondSnowflakeId <a class="header-anchor" href="#millisecondsnowflakeid" aria-label="Permalink to &quot;MillisecondSnowflakeId&quot;">​</a></h3><p><code>MillisecondSnowflakeId</code> 是 <code>SnowflakeId</code> 的默认实现，它使用 <code>System.currentTimeMillis()</code> 作为时间戳，精确到毫秒级别。</p><h3 id="secondsnowflakeid" tabindex="-1">SecondSnowflakeId <a class="header-anchor" href="#secondsnowflakeid" aria-label="Permalink to &quot;SecondSnowflakeId&quot;">​</a></h3><p><code>SecondSnowflakeId</code> 是 <code>SnowflakeId</code> 的另一种实现，它使用 <code>System.currentTimeMillis() / 1000</code> 作为时间戳，精确到秒级别。</p><h3 id="defaultsnowflakefriendlyid" tabindex="-1">DefaultSnowflakeFriendlyId <a class="header-anchor" href="#defaultsnowflakefriendlyid" aria-label="Permalink to &quot;DefaultSnowflakeFriendlyId&quot;">​</a></h3><p><code>DefaultSnowflakeFriendlyId</code> 是 <code>SnowflakeId</code> 的包装器，它将<code>SnowflakeId</code>转换成比较友好的字符串表示：<code>{timestamp}-{machineId}-{sequence} -&gt; 20210623131730192-1-0</code></p><h3 id="clocksyncsnowflakeid" tabindex="-1">ClockSyncSnowflakeId <a class="header-anchor" href="#clocksyncsnowflakeid" aria-label="Permalink to &quot;ClockSyncSnowflakeId&quot;">​</a></h3><p><code>ClockSyncSnowflakeId</code> 是 <code>SnowflakeId</code> 的包装器，当发生时钟回拨时会使用<code>ClockBackwardsSynchronizer</code>主动等待时钟同步来重新生成ID，提供更加友好的使用体验。</p><h2 id="machineiddistributor" tabindex="-1">MachineIdDistributor <a class="header-anchor" href="#machineiddistributor" aria-label="Permalink to &quot;MachineIdDistributor&quot;">​</a></h2><p><code>MachineIdDistributor</code> 是 <code>SnowflakeId</code> 的机器号分配器，它负责分配机器号，同时还会存储<code>MachineId</code>的上一次时间戳，用于<strong>启动时时钟回拨</strong>的检查。</p><p align="center"><img src="'+d+'" alt="MachineIdDistributor"></p><p>目前 <em>CosId</em> 提供了以下六种 <code>MachineId</code> 分配器。</p><ul><li><code>ManualMachineIdDistributor</code>: 手动配置<code>machineId</code>，一般只有在集群规模非常小的时候才有可能使用，不推荐。</li><li><code>StatefulSetMachineIdDistributor</code>: 使用<code>Kubernetes</code>的<code>StatefulSet</code>提供的稳定的标识ID（HOSTNAME=service-01）作为机器号。</li><li><code>RedisMachineIdDistributor</code>: 使用<strong>Redis</strong>作为机器号的分发存储，同时还会存储<code>MachineId</code>的上一次时间戳，用于<strong>启动时时钟回拨</strong>的检查。</li><li><code>JdbcMachineIdDistributor</code>: 使用<strong>关系型数据库</strong>作为机器号的分发存储，同时还会存储<code>MachineId</code>的上一次时间戳，用于<strong>启动时时钟回拨</strong>的检查。</li><li><code>ZookeeperMachineIdDistributor</code>: 使用<strong>ZooKeeper</strong>作为机器号的分发存储，同时还会存储<code>MachineId</code>的上一次时间戳，用于<strong>启动时时钟回拨</strong>的检查。</li><li><code>MongoMachineIdDistributor</code>: 使用<strong>MongoDB</strong>作为机器号的分发存储，同时还会存储<code>MachineId</code>的上一次时间戳，用于<strong>启动时时钟回拨</strong>的检查。</li></ul><h2 id="machineidguarder" tabindex="-1">MachineIdGuarder <a class="header-anchor" href="#machineidguarder" aria-label="Permalink to &quot;MachineIdGuarder&quot;">​</a></h2><p align="center"><img src="'+o+`" alt="Machine Id Safe Guard"></p><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><p><a href="./../reference/config/snowflake.html">SnowflakeId 配置</a></p><h3 id="配置案例" tabindex="-1">配置案例 <a class="header-anchor" href="#配置案例" aria-label="Permalink to &quot;配置案例&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cosid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${spring.application.name}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  machine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    distributor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">jdbc</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 机器号分配器</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    guarder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 开启机器号守护</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  snowflake</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    zone-id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Asia/Shanghai</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    epoch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1577203200000</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    share</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      clock-sync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 开启始终回拨同步</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      friendly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      short_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        converter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          prefix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cosid_</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">radix</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          radix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">            char-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">            pad-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      safe-js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        machine-bit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        sequence-bit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span></span></code></pre></div>`,19))])}const D=t(g,[["render",f]]);export{A as __pageData,D as default};
