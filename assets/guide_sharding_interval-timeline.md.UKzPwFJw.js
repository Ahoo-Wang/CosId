import{_ as t}from"./chunks/CosIdIntervalShardingAlgorithm.BPct6Ea1.js";import{_ as a,a as r}from"./chunks/Throughput-Of-IntervalShardingAlgorithm-RangeShardingValue.CauZn_Be.js";import{_ as i,c as o,a2 as d,o as n}from"./chunks/framework.Dg3afQf7.js";const S=JSON.parse('{"title":"基于间隔的时间范围分片算法","description":"","frontmatter":{},"headers":[],"relativePath":"guide/sharding/interval-timeline.md","filePath":"guide/sharding/interval-timeline.md","lastUpdated":1760420434000}'),l={name:"guide/sharding/interval-timeline.md"};function s(c,e,m,g,_,h){return n(),o("div",null,e[0]||(e[0]=[d('<h1 id="基于间隔的时间范围分片算法" tabindex="-1">基于间隔的时间范围分片算法 <a class="header-anchor" href="#基于间隔的时间范围分片算法" aria-label="Permalink to &quot;基于间隔的时间范围分片算法&quot;">​</a></h1><p align="center"><img src="'+t+'" alt="CosIdIntervalShardingAlgorithm"></p><ul><li>算法复杂度：O(1)</li><li>易用性: 支持多种数据类型 (<code>Long</code>/<code>LocalDateTime</code>/<code>DATE</code>/ <code>String</code> / <code>SnowflakeId</code>)，而官方实现是先转换成字符串再转换成<code>LocalDateTime</code>，转换成功率受时间格式化字符影响。</li><li>性能 : 相比于 <code>org.apache.shardingsphere.sharding.algorithm.sharding.datetime.IntervalShardingAlgorithm</code> 性能高出 <em>1200~4000</em> 倍。</li></ul><table tabindex="0"><thead><tr><th><strong>PreciseShardingValue</strong></th><th><strong>RangeShardingValue</strong></th></tr></thead><tbody><tr><td><img src="'+a+'"></td><td><img src="'+r+'"></td></tr></tbody></table>',4)]))}const T=i(l,[["render",s]]);export{S as __pageData,T as default};
