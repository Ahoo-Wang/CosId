import{_ as s,c as a,a2 as n,o as e}from"./chunks/framework.Dg3afQf7.js";const l="/assets/IdConverter-impl-class.Q5MH9kj_.png",g=JSON.parse('{"title":"IdConverter","description":"","frontmatter":{},"headers":[],"relativePath":"guide/id-converter.md","filePath":"guide/id-converter.md","lastUpdated":1760420434000}'),t={name:"guide/id-converter.md"};function r(o,i,d,p,h,k){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="idconverter" tabindex="-1">IdConverter <a class="header-anchor" href="#idconverter" aria-label="Permalink to &quot;IdConverter&quot;">​</a></h1><blockquote><p><strong>ID转换器</strong>，用于将 <code>long</code> 类型ID转换为 <code>String</code>，反之亦然。</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ThreadSafe</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IdConverter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * convert {@link long} type ID to {@link String}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> id</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> {@link long} type ID</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> {@link String} type ID</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * convert {@link String} type ID to {@link long}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> idString</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> {@link String} type ID</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> {@link long} type ID</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    long</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> asLong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">idString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="idconverter-implementation-class-diagram" tabindex="-1">IdConverter implementation class diagram <a class="header-anchor" href="#idconverter-implementation-class-diagram" aria-label="Permalink to &quot;IdConverter implementation class diagram&quot;">​</a></h2><p align="center"><img src="`+l+'" alt="IdGenerator implementation class diagram"></p><h2 id="tostringidconverter" tabindex="-1">ToStringIdConverter <a class="header-anchor" href="#tostringidconverter" aria-label="Permalink to &quot;ToStringIdConverter&quot;">​</a></h2><blockquote><p>String 转换器，用于将 <code>long</code> 转换成String 或者将 String 转换成 long 类型</p></blockquote><ul><li>规则 <ul><li>long 转 String：String.valueOf</li><li>String 转 long： Long.parseLong</li></ul></li></ul><h2 id="radix62idconverter" tabindex="-1">Radix62IdConverter <a class="header-anchor" href="#radix62idconverter" aria-label="Permalink to &quot;Radix62IdConverter&quot;">​</a></h2><blockquote><p>62进制转换器，用于将 <code>long</code> 类型转换成 <code>62进制字符串</code>，或者将 <code>62进制字符串</code> 转换成<code>long</code> 类型</p></blockquote><ul><li>规则：<code>[0-9][A-Z][a-z]{11}</code></li></ul><h2 id="radix36idconverter" tabindex="-1">Radix36IdConverter <a class="header-anchor" href="#radix36idconverter" aria-label="Permalink to &quot;Radix36IdConverter&quot;">​</a></h2><blockquote><p>36进制转换器，用于将 <code>long</code> 类型转换成 <code>36进制字符串</code>，或者将 <code>36进制字符串</code> 转换成<code>long</code> 类型</p></blockquote><ul><li>规则：<code>[0-9][A-Z]{13}</code></li></ul><h2 id="snowflakefriendlyidconverter" tabindex="-1">SnowflakeFriendlyIdConverter <a class="header-anchor" href="#snowflakefriendlyidconverter" aria-label="Permalink to &quot;SnowflakeFriendlyIdConverter&quot;">​</a></h2><blockquote><p>雪花Id转换器，将符合雪花规则的字符串，转换成 long ，或者long 转换成雪花规则字符串</p></blockquote><h2 id="prefixidconverter" tabindex="-1">PrefixIdConverter <a class="header-anchor" href="#prefixidconverter" aria-label="Permalink to &quot;PrefixIdConverter&quot;">​</a></h2><blockquote><p>将带有前缀的字符串转换成long，或者将long转换成带前缀字符串</p></blockquote><ul><li>规则 <ul><li>例如：前缀为：<code>no_</code>, 转换器选用<code>ToStringIdConverter</code>，数字<code>1</code> 经过转换得到<code>no_1</code>,反之亦然。</li></ul></li></ul>',19)]))}const u=s(t,[["render",r]]);export{g as __pageData,u as default};
